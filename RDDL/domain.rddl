//Bruce Chidley, 20104323
//CISC 813: Automated Planning


domain covid-sim {

	requirements = {
		concurrent           // different agents are controlled independently
	};

	types {
		agent : object;
	};

	pvariables {

		// Non-fluent variables

		MASK_FACTOR : {non-fluent, real, default = 0.8 }; // Factor for transmission reduction when masked
		VACCINE_FACTOR : {non-fluent, real, default = 0.4 }; // Factor for transmission reduction when vaccinated
		MASK_CHANCE : {non-fluent, real, default = 0.8 }; // Chance an individual wears a mask
		BASIC_REPR_RATIO : {non-fluent, real, default = 3.32 }; // Basic Reproductive Ratio
		ISOLATION_RATE : {non-fluent, real, default = 0.5 }; // Chance an individual isolates

		// The workplace an agent is working at (or store, if they are 70+)
		AGENT_JOB(agent) : { non-fluent, int, default = 0 };

		// The home an agent is living at
		AGENT_HOME(agent) : { non-fluent, int, default = 0 };

		// The stores an agent goes to
		AGENT_STORE_1(agent) : { non-fluent, int, default = 0 };
		AGENT_STORE_2(agent) : { non-fluent, int, default = 0 };

		// The age of an agent
		AGENT_AGE(agent) : { non-fluent, int, default = 0 };

		// Describes whether an agent is a student or not
		AGENT_STUDENT(agent) : { non-fluent, bool, default = false };

		// State fluents

		susceptible_count: { state-fluent, int, default = 0}; // Number of susceptible agents

		exposed(agent) : { state-fluent, bool, default = false }; // agent currently exposed to COVID-19
		exposed_total_time(agent) : { state-fluent, real, default = 10 }; // the total time an agent will remain in the exposed class
		exposed_period(agent) : { state-fluent, real, default = 0.0 }; // time an agent has been in the exposed class

		infectious(agent) : { state-fluent, bool, default = false }; // agent currently infectious with COVID-19
		infectious_total_time(agent) : { state-fluent, real, default = 10 }; // the total time an agent will remain in the infectious class
		infectious_period(agent) : { state-fluent, real, default = 0.0 }; // time an agent has been in the infectious class

		isolating(agent) : { state-fluent, bool, default = false }; //Checks whether or not an agent is isolating

		recovered(agent) : { state-fluent, bool, default = false }; // agent currently recovered from COVID-19
		recovered_total_time(agent) : { state-fluent, real, default = 10 }; // the total time an agent will remain in the recovered class
		recovered_period(agent) : { state-fluent, real, default = 0.0 }; // time an agent has been in the recovered class

		is_home(agent) : { state-fluent, bool, default = false }; // agent is currently at home
		is_working(agent) : { state-fluent, bool, default = false }; // agent is currently at work
		is_shopping(agent) : { state-fluent, bool, default = false }; // agent is currently shopping
		masked(agent) : { state-fluent, bool, default = false }; // agent is currently wearing a mask
		vaccinated(agent) : { state-fluent, bool, default = false }; // agent is currently vaccinated

		day : { state-fluent, bool, default = true }; // Tracks the time of day (day or night)
		day_of_week : { state-fluent, int, default = 1 }; // Tracks the day of the week (Monday = 1/2, ...,  Sunday = 13/14)
		time_step : { state-fluent, int, default = 0 }; // Tracks the time steps

		// Interm Fluents

		weekday : { interm-fluent, bool};
		weekend1 : { interm-fluent, bool};
		weekend2 : { interm-fluent, bool};
		susceptible(agent) : { interm-fluent, bool}; // agent is susceptible to catching disease
		exposed-to-infectious(agent) : { interm-fluent, bool}; //Denotes that an agent is moving from the exposed to infected class
		infectious-to-recovered(agent) : { interm-fluent, bool};//Denotes that an agent is moving from the infected to recovered class
		recovered-to-susceptible(agent) : { interm-fluent, bool}; //Denotes that an agent is moving from the recovered to susceptible class

	};

	cpfs {

		time_step' = 
			time_step + 1
		;

		//Flips between true and false - day and night
		day' = 
			if (~day)
				then true
			else
				false
		;

		//Ticks up to 14 and then goes back to 1. Each day is 2 ticks for day and nights
		day_of_week' =
			if (day_of_week == 14)
				then 1
			else
				day_of_week + 1
		;

		weekday =
			if (day_of_week <= 10)
				then true
			else
				false
		;

		weekend1 =
			if (day_of_week >= 11 ^ day_of_week <= 12)
				then true
			else
				false
		;

		weekend2 =
			if (day_of_week >= 13 ^ day_of_week <= 14)
				then true
			else
				false
		;

		//Checks to see if an agent is at home - night = 1 = at home
		is_home'(?a) = 
			if (~day | isolating(?a))
				then true
			else
				false
		;
		
		//Checks to see if an agent is working - day + a weekday = working
		is_working'(?a) =
			if (day ^ weekday ^ ~isolating(?a))
				then true
			else
				false
		;
		
		//Checks to see if an agent is shopping - day + a weekend = shopping
		is_shopping'(?a) =
			if (day ^ (weekend1 | weekend2) ^ ~isolating(?a))
				then true
			else
				false
		;

		//Counts the total number of susceptible agents
		susceptible_count' =
			sum_{?a : agent} [susceptible(?a)]
		;

		susceptible(?a) = 
			if (~exposed(?a) ^ ~infectious(?a) ^ ~recovered(?a))
				then true
			else
				false
		;

		//Calculates the time an agent will be in the exposed class
		exposed_total_time'(?a) =
			if (exposed_period(?a) == 1)
				then Normal(9,2)
			else
				exposed_total_time(?a)
		;

		//Counts the current time in the exposed class
		exposed_period'(?a) =
			if (exposed(?a))
				then exposed_period(?a) + 1
			else
				0
		;

		//If the time in exposed class exceeds the total time an agent should spend there, change to true
		exposed-to-infectious(?a) =
			if (exposed(?a) ^ (exposed_period(?a) >= exposed_total_time(?a)))
				then true
			else	
				false
		;

		//Calculates whether an agent is exposed or not
		exposed'(?a) =

			//If working + susceptible, then perform: Bern(#infectious / total), multiplying each infectious agent + starting agent by MASK_FACTOR if wearing a mask, VACCINE_FACTOR if vaccinated
			if (is_working(?a) ^ susceptible(?a))
				then
					if (
						(sum_{?a2 : agent}
						[
							if ((AGENT_JOB(?a) == AGENT_JOB(?a2)) ^ infectious(?a2) ^ is_working(?a2))
								then
									Bernoulli(
										((if (masked(?a)) then MASK_FACTOR else 1) * 
										(if (masked(?a2)) then MASK_FACTOR else 1) *
										(if (vaccinated(?a)) then VACCINE_FACTOR else 1)) *
										if 
										((
											BASIC_REPR_RATIO / infectious_total_time(?a2) /

											(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

										) >= 1) then 1
										else

										(
											BASIC_REPR_RATIO / infectious_total_time(?a2) /

											(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

										)

									)
							else
								false
						]
						)
					 >= 1) then true
					 else false

			else if (is_home(?a) ^ susceptible(?a))
				then
					if (
						(sum_{?a2 : agent}
						[
							if ((AGENT_HOME(?a) == AGENT_HOME(?a2)) ^ infectious(?a2) ^ is_home(?a2))
								then
									Bernoulli(
										((if (masked(?a)) then MASK_FACTOR else 1) * 
										(if (masked(?a2)) then MASK_FACTOR else 1) *
										(if (vaccinated(?a)) then VACCINE_FACTOR else 1)) *
										if 
										((
											BASIC_REPR_RATIO / infectious_total_time(?a2) /

											(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

										) >= 1) then 1
										else

										(
											BASIC_REPR_RATIO / infectious_total_time(?a2) /

											(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

										)

									)
							else
								false
						]
						)
					 >= 1) then true
					 else false

			//If shopping + susceptible, then perform: Bern(#infectious / total), multiplying each infectious agent + starting agent by MASK_FACTOR if wearing a mask,  VACCINE_FACTOR if vaccinated
			else if (is_shopping(?a) ^ susceptible(?a))
				then
					if (weekend1)
						then
							if (
								(sum_{?a2 : agent}
								[
									if ((AGENT_STORE_1(?a) == AGENT_STORE_1(?a2)) ^ infectious(?a2) ^ is_shopping(?a2))
										then
											Bernoulli(
												((if (masked(?a)) then MASK_FACTOR else 1) * 
												(if (masked(?a2)) then MASK_FACTOR else 1) *
												(if (vaccinated(?a)) then VACCINE_FACTOR else 1)) *
												if 
												((
													BASIC_REPR_RATIO / infectious_total_time(?a2) /

													(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

												) >= 1) then 1
												else

												(
													BASIC_REPR_RATIO / infectious_total_time(?a2) /

													(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

												)

											)
									else
										false
								]
								)
							>= 1) then true
							else false
							
					else
						if (
							(sum_{?a2 : agent}
							[
								if ((AGENT_STORE_2(?a) == AGENT_STORE_2(?a2)) ^ infectious(?a2) ^ is_shopping(?a2))
									then
										Bernoulli(
											((if (masked(?a)) then MASK_FACTOR else 1) * 
											(if (masked(?a2)) then MASK_FACTOR else 1) *
											(if (vaccinated(?a)) then VACCINE_FACTOR else 1)) *

											if 
											((
												BASIC_REPR_RATIO / infectious_total_time(?a2) /

												(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

											) >= 1) then 1
											else

											(
												BASIC_REPR_RATIO / infectious_total_time(?a2) /

												(1 + (sum_{?a3 : agent}[(AGENT_JOB(?a) == AGENT_JOB(?a3)) ^ susceptible(?a3)]))

											)

										)
								else
									false
							]
							)
						>= 1) then true
						else false


			//If already in exposed class, then changes it to false if counter exceeds total time
			else if (exposed-to-infectious(?a))
				then false

			//Otherwise, just keep things how they are (False)	
			else
				exposed(?a)
		;

		//Calculates the time an agent will be in the infectious class
		infectious_total_time'(?a) =
			if (exposed-to-infectious(?a))
				then Normal(16,4)
			else
				infectious_total_time(?a)
			
		;

		//Counts the current time in the infectious class
		infectious_period'(?a) =
			if (infectious(?a))
				then infectious_period(?a) + 1
			else
				0
		;

		//If the time in infectious class exceeds the total time an agent should spend there, change to true
		infectious-to-recovered(?a) =
			if (infectious(?a) ^ (infectious_period(?a) >= infectious_total_time(?a)))
				then true
			else	
				false
		;

		//Calculates whether an agent is infectious or not
		infectious'(?a) =

			//If exposed and the counter exceeds total exposed time, then set infectious to be true
			if (exposed-to-infectious(?a))
				then true

			//If infectious and the counter exceeds total infectious time, then set infectious to be false
			else if (infectious-to-recovered(?a))
				then false

			//Otherwise, keep the same status
			else
				infectious(?a)
		;

		//When an agent is infectious, they have some probability of isolating
		isolating'(?a) =
			if (exposed-to-infectious(?a))
				then Bernoulli(ISOLATION_RATE)
			else if (infectious-to-recovered(?a))
				then false
			else
				isolating(?a)
		;

		//Calculates the time an agent will be in the recovered class
		recovered_total_time'(?a) =
			if (infectious-to-recovered(?a))
				then 14
			else
				recovered_total_time(?a)
		;

		//Counts the current time in the recovered class
		recovered_period'(?a) =
			if (recovered(?a))
				then recovered_period(?a) + 1
			else
				0
		;

		//If the time in recovered class exceeds the total time an agent should spend there, change to true
		recovered-to-susceptible(?a) =
			if (recovered(?a) ^ (recovered_period(?a) >= recovered_total_time(?a)))
				then true
			else	
				false
		;

		//Calculates whether an agent is recovered or not
		recovered'(?a) =

			//If exposed and the counter exceeds total exposed time, then set infectious to be true
			if (infectious-to-recovered(?a))
				then true

			//If infectious and the counter exceeds total infectious time, then set infectious to be false
			else if (recovered-to-susceptible(?a))
				then false

			//Otherwise, keep the same status
			else
				recovered(?a)
		;
			

		//Puts mask on if all_mask is true, or if student_mask is true and the agent is a student, otherwise false
		masked'(?a) = 
			if (time_step == 0)
				then Bernoulli(MASK_CHANCE)
			else
				masked(?a)
		;

		//vaccinates if all_vaccinate is true, or if student_vaccinate is true and the agent is a student, and the vaccine has not been implemented yet, otherwise false
		vaccinated'(?a) = 
			if (time_step == 0)
				then 
					if (AGENT_AGE(?a) == 0)
						then Bernoulli(0.251)
					else if (AGENT_AGE(?a) == 1)
						then Bernoulli(0.771)
					else if (AGENT_AGE(?a) == 2)
						then Bernoulli(0.819)
					else if (AGENT_AGE(?a) == 3)
						then Bernoulli(0.851)
					else if (AGENT_AGE(?a) == 4)
						then Bernoulli(0.883)
					else if (AGENT_AGE(?a) == 5)
						then Bernoulli(0.885)
					else if (AGENT_AGE(?a) == 6)
						then Bernoulli(0.940)
					else if (AGENT_AGE(?a) == 7)
						then Bernoulli(0.982)
					else if (AGENT_AGE(?a) == 8)
						then Bernoulli(0.990)
					else
						vaccinated(?a)

			else
				vaccinated(?a)
		;

	};

	//reward calculation
	reward = 0;
}

